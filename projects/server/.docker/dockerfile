# we cannot use ubuntu for build and alpine for production, as some dependencies cannot work properly after platform changes
FROM node:16-alpine AS build

WORKDIR /app 

COPY package*.json ./
# alpine have no built-in build requirements for node-gyp, so we have to install them manually
# https://stackoverflow.com/questions/54428608/docker-node-alpine-image-build-fails-on-node-gyp
RUN apk add g++ make python3 \
    && ln -s /usr/bin/python3 /usr/bin/python \
    && ln -s /usr/bin/pip3 /usr/bin/pip \
    && npm ci

COPY ./ ./
RUN npm run build:libs \
    && npm run build:server \
    && DB_PATH=data/db.sqlite3 node dist/server/db.js init \
    # prune shound't be performed in the final stage, otherwise the image size will not decrease
    && npm prune --production



FROM node:16-alpine AS production

WORKDIR /app
VOLUME /app/data
EXPOSE 3000

COPY package*.json ./
COPY --from=build /app/node_modules/ node_modules/
COPY --from=build /app/projects projects/

# since we've pruned in a previous stage, this prune have no direct-effect, but as a side-effect, this creates workspace symlinks in node_modules
RUN npm prune --production

COPY --from=build /app/dist/ dist/
COPY --from=build /app/data/ data/

CMD PORT=3000 node dist/server/main.js
